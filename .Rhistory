rep <- str_split(rep, "rep")[[1]][2]
rep
res <- load(all_results[i])
#no augmented likelihood
vnames <-  c('alpha', 'omega', 'yscale')
cx <- coef(fb)[vnames]
odf = as.data.frame(cx)
odf$`2.5%` <- exp( log(coef(fb)[vnames])-fb$err*1.96 )
odf$`97.5%` <- exp( log(coef(fb)[vnames])+fb$err*1.96 )
odf
odf["alpha"]
odf[1,]
odf[1,1]
alpha <- odf[1,1]
alpha_lower <- odf[1,2]
alpha_upper <- odf[1,3]
alpha
alpha_lower
alpha_upper
odf
devtools::document()
#no augmented likelihood
cis <- get_CI(fb)
cis
alpha <- cis[1,1]
alpha_lower <- cis[1,2]
alpha_upper <- cis[1,3]
omega <- cis[2,1]
omega_lower <- cis[2,2]
omega_upper <- cis[2,3]
#using augmented likelihood
cis_au <- get_CI(fb_au)
#using augmented likelihood
cis_au <- get_CI(fb_au)
alpha_au <- cis_au[1,1]
alpha_au_lower <- cis_au[1,2]
alpha_au_upper <- cis_au[1,3]
omega_au <- cis_au[2,1]
omega_au_lower <- cis_au[2,2]
omega_au_upper <- cis_au[2,3]
fb_au
alpha_au
alpha_au_lower
alpha_au_upper
omega_au
omega_au_lower
omega_au_upper
#read true parameter values
params_true <- read.csv("params.csv")
params_true
param_n
params_true[param_n,]
params_true$alpha[,param_n]
params_true$alpha[param_n,]
param_n
params_true$alpha[param_n]
params_true
param_n
params_true$alpha[as.numeric(param_n)]
results <- data.frame(param = param_n, rep = rep,
true_alpha =  params_true$alpha[as.numeric(param_n)],
true_omega =  params_true$omega[as.numeric(param_n)],
omega = omega, omega_lower = omega_lower, omega_upper = omega_upper,
alpha = alpha, alpha_lower = alpha_lower, alpha_upper = alpha_upper,
omega_au = omega_au, omega_au_lower = omega_au_lower, omega_au_upper = omega_au_upper,
alpha_au = alpha_au, alpha_au_lower = alpha_au_lower, alpha_au_upper = alpha_au_upper)
results
#get estimated values for alpha and omega
library(musseco)
library(stringr)
#read true parameter values
params_true <- read.csv("params.csv")
all_results <- list.files("CoalescentJl_simulations/trees",
pattern = "*.rda",
recursive = TRUE,
full.names = TRUE)
for(i in 1:length(all_results)){
texts <- str_split(all_results[i], "/")
params <- texts[[1]][3]
param_n <- str_split(params, "_")[[1]][2]
rep <- texts[[1]][4]
rep <- str_split(rep, "rep")[[1]][2]
res <- load(all_results[i])
#no augmented likelihood
cis <- get_CI(fb)
alpha <- cis[1,1]
alpha_lower <- cis[1,2]
alpha_upper <- cis[1,3]
omega <- cis[2,1]
omega_lower <- cis[2,2]
omega_upper <- cis[2,3]
#using augmented likelihood
cis_au <- get_CI(fb_au)
alpha_au <- cis_au[1,1]
alpha_au_lower <- cis_au[1,2]
alpha_au_upper <- cis_au[1,3]
omega_au <- cis_au[2,1]
omega_au_lower <- cis_au[2,2]
omega_au_upper <- cis_au[2,3]
true_ome
results <- data.frame(param = param_n, rep = rep,
true_alpha =  params_true$alpha[as.numeric(param_n)],
true_omega =  params_true$omega[as.numeric(param_n)],
omega = omega, omega_lower = omega_lower, omega_upper = omega_upper,
alpha = alpha, alpha_lower = alpha_lower, alpha_upper = alpha_upper,
omega_au = omega_au, omega_au_lower = omega_au_lower, omega_au_upper = omega_au_upper,
alpha_au = alpha_au, alpha_au_lower = alpha_au_lower, alpha_au_upper = alpha_au_upper)
}
results
#get estimated values for alpha and omega
library(musseco)
library(stringr)
#read true parameter values
params_true <- read.csv("params.csv")
all_results <- list.files("CoalescentJl_simulations/trees",
pattern = "*.rda",
recursive = TRUE,
full.names = TRUE)
for(i in 1:length(all_results)){
texts <- str_split(all_results[i], "/")
params <- texts[[1]][3]
param_n <- str_split(params, "_")[[1]][2]
rep <- texts[[1]][4]
rep <- str_split(rep, "rep")[[1]][2]
res <- load(all_results[i])
#no augmented likelihood
cis <- get_CI(fb)
alpha <- cis[1,1]
alpha_lower <- cis[1,2]
alpha_upper <- cis[1,3]
omega <- cis[2,1]
omega_lower <- cis[2,2]
omega_upper <- cis[2,3]
#using augmented likelihood
cis_au <- get_CI(fb_au)
alpha_au <- cis_au[1,1]
alpha_au_lower <- cis_au[1,2]
alpha_au_upper <- cis_au[1,3]
omega_au <- cis_au[2,1]
omega_au_lower <- cis_au[2,2]
omega_au_upper <- cis_au[2,3]
results <- data.frame(param = param_n, rep = rep,
true_alpha =  params_true$alpha[as.numeric(param_n)],
true_omega =  params_true$omega[as.numeric(param_n)],
omega = omega, omega_lower = omega_lower, omega_upper = omega_upper,
alpha = alpha, alpha_lower = alpha_lower, alpha_upper = alpha_upper,
omega_au = omega_au, omega_au_lower = omega_au_lower, omega_au_upper = omega_au_upper,
alpha_au = alpha_au, alpha_au_lower = alpha_au_lower, alpha_au_upper = alpha_au_upper)
}
results
all_data <- data.frame()
#get estimated values for alpha and omega
library(musseco)
library(stringr)
#read true parameter values
params_true <- read.csv("params.csv")
all_results <- list.files("CoalescentJl_simulations/trees",
pattern = "*.rda",
recursive = TRUE,
full.names = TRUE)
all_data <- data.frame()
for(i in 1:length(all_results)){
texts <- str_split(all_results[i], "/")
params <- texts[[1]][3]
param_n <- str_split(params, "_")[[1]][2]
rep <- texts[[1]][4]
rep <- str_split(rep, "rep")[[1]][2]
res <- load(all_results[i])
#no augmented likelihood
cis <- get_CI(fb)
alpha <- cis[1,1]
alpha_lower <- cis[1,2]
alpha_upper <- cis[1,3]
omega <- cis[2,1]
omega_lower <- cis[2,2]
omega_upper <- cis[2,3]
#using augmented likelihood
cis_au <- get_CI(fb_au)
alpha_au <- cis_au[1,1]
alpha_au_lower <- cis_au[1,2]
alpha_au_upper <- cis_au[1,3]
omega_au <- cis_au[2,1]
omega_au_lower <- cis_au[2,2]
omega_au_upper <- cis_au[2,3]
results <- data.frame(param = param_n, rep = rep,
true_alpha =  params_true$alpha[as.numeric(param_n)],
true_omega =  params_true$omega[as.numeric(param_n)],
omega = omega, omega_lower = omega_lower, omega_upper = omega_upper,
alpha = alpha, alpha_lower = alpha_lower, alpha_upper = alpha_upper,
omega_au = omega_au, omega_au_lower = omega_au_lower, omega_au_upper = omega_au_upper,
alpha_au = alpha_au, alpha_au_lower = alpha_au_lower, alpha_au_upper = alpha_au_upper)
all_data <- rbind(all_data, results)
}
library(fitMuSSECo)
#read true parameter values
params_true <- read.csv("params.csv")
all_results <- list.files("CoalescentJl_simulations/trees",
pattern = "*.rda",
recursive = TRUE,
full.names = TRUE)
all_data <- data.frame()
for(i in 1:length(all_results)){
texts <- str_split(all_results[i], "/")
params <- texts[[1]][3]
param_n <- str_split(params, "_")[[1]][2]
rep <- texts[[1]][4]
rep <- str_split(rep, "rep")[[1]][2]
res <- load(all_results[i])
#no augmented likelihood
cis <- get_CI(fb)
alpha <- cis[1,1]
alpha_lower <- cis[1,2]
alpha_upper <- cis[1,3]
omega <- cis[2,1]
omega_lower <- cis[2,2]
omega_upper <- cis[2,3]
#using augmented likelihood
cis_au <- get_CI(fb_au)
alpha_au <- cis_au[1,1]
alpha_au_lower <- cis_au[1,2]
alpha_au_upper <- cis_au[1,3]
omega_au <- cis_au[2,1]
omega_au_lower <- cis_au[2,2]
omega_au_upper <- cis_au[2,3]
results <- data.frame(param = param_n, rep = rep,
true_alpha =  params_true$alpha[as.numeric(param_n)],
true_omega =  params_true$omega[as.numeric(param_n)],
omega = omega, omega_lower = omega_lower, omega_upper = omega_upper,
alpha = alpha, alpha_lower = alpha_lower, alpha_upper = alpha_upper,
omega_au = omega_au, omega_au_lower = omega_au_lower, omega_au_upper = omega_au_upper,
alpha_au = alpha_au, alpha_au_lower = alpha_au_lower, alpha_au_upper = alpha_au_upper)
all_data <- rbind(all_data, results)
}
all_data
saveRDS(all_data, "Julia_fit_results.rds")
#read all data
#loc_results <- "CoalescentJl_simulations/trees"
loc_results <- "TiPS_simulations/trees"
all_results <- list.files(loc_results,
pattern = "*.rda",
recursive = TRUE,
full.names = TRUE)
all_results
all_data <- data.frame()
for(i in 1:length(all_results)){
texts <- str_split(all_results[i], "/")
params <- texts[[1]][3]
param_n <- str_split(params, "_")[[1]][2]
rep <- texts[[1]][4]
rep <- str_split(rep, "rep")[[1]][2]
res <- load(all_results[i])
#no augmented likelihood
cis <- get_CI(fb)
alpha <- cis[1,1]
alpha_lower <- cis[1,2]
alpha_upper <- cis[1,3]
omega <- cis[2,1]
omega_lower <- cis[2,2]
omega_upper <- cis[2,3]
#using augmented likelihood
cis_au <- get_CI(fb_au)
alpha_au <- cis_au[1,1]
alpha_au_lower <- cis_au[1,2]
alpha_au_upper <- cis_au[1,3]
omega_au <- cis_au[2,1]
omega_au_lower <- cis_au[2,2]
omega_au_upper <- cis_au[2,3]
results <- data.frame(param = param_n, rep = rep,
true_alpha =  params_true$alpha[as.numeric(param_n)],
true_omega =  params_true$omega[as.numeric(param_n)],
omega = omega, omega_lower = omega_lower, omega_upper = omega_upper,
alpha = alpha, alpha_lower = alpha_lower, alpha_upper = alpha_upper,
omega_au = omega_au, omega_au_lower = omega_au_lower, omega_au_upper = omega_au_upper,
alpha_au = alpha_au, alpha_au_lower = alpha_au_lower, alpha_au_upper = alpha_au_upper)
all_data <- rbind(all_data, results)
}
#get estimated values for alpha and omega
library(musseco)
library(stringr)
library(fitMuSSECo)
#read true parameter values
params_true <- read.csv("params.csv")
#read all data
#loc_results <- "CoalescentJl_simulations/trees"
loc_results <- "TiPS_simulations/trees"
all_results <- list.files(loc_results,
pattern = "*.rda",
recursive = TRUE,
full.names = TRUE)
all_data <- data.frame()
for(i in 1:length(all_results)){
texts <- str_split(all_results[i], "/")
params <- texts[[1]][3]
param_n <- str_split(params, "_")[[1]][2]
rep <- texts[[1]][4]
rep <- str_split(rep, "rep")[[1]][2]
res <- load(all_results[i])
#no augmented likelihood
cis <- get_CI(fb)
alpha <- cis[1,1]
alpha_lower <- cis[1,2]
alpha_upper <- cis[1,3]
omega <- cis[2,1]
omega_lower <- cis[2,2]
omega_upper <- cis[2,3]
#using augmented likelihood
cis_au <- get_CI(fb_au)
alpha_au <- cis_au[1,1]
alpha_au_lower <- cis_au[1,2]
alpha_au_upper <- cis_au[1,3]
omega_au <- cis_au[2,1]
omega_au_lower <- cis_au[2,2]
omega_au_upper <- cis_au[2,3]
results <- data.frame(param = param_n, rep = rep,
true_alpha =  params_true$alpha[as.numeric(param_n)],
true_omega =  params_true$omega[as.numeric(param_n)],
omega = omega, omega_lower = omega_lower, omega_upper = omega_upper,
alpha = alpha, alpha_lower = alpha_lower, alpha_upper = alpha_upper,
omega_au = omega_au, omega_au_lower = omega_au_lower, omega_au_upper = omega_au_upper,
alpha_au = alpha_au, alpha_au_lower = alpha_au_lower, alpha_au_upper = alpha_au_upper)
all_data <- rbind(all_data, results)
}
saveRDS(all_data, "TiPS_fit_results.rds")
all_data
#read data in which trees were simulated with CoalescentJl
julia_data <- readRDS("results/Julia_fit_results.rds")
#read data in which trees were simulated with TiPS
tips_data <- readRDS("results/tips_fit_results.rds")
julia_data
julia_data["method"] <- "coalescentJl"
tips_data["method"] <- "TiPS"
#merge all data
all_data <- rbind(julia_data, tips_data)
all_data
library(ggplot2)
head(tips_data)
#color blind save pallet (http://www.cookbook-r.com/Graphs/Colors_(ggplot2)/#a-colorblind-friendly-palette)
cbbPalette <- c("#000000", "#E69F00", "#56B4E9", "#009E73", "#F0E442", "#0072B2", "#D55E00", "#CC79A7")
quartz()
head(tips_data)
ggplot(tips_data, aes(x = rep, y = omega, color = param)) +
geom_point(size = 1, position= position_dodge(0.8)) +
geom_errorbar(aes(ymax = omega_upper, ymin = omega_lower),
width = 1, position= position_dodge(0.8)) +
scale_x_discrete(guide = guide_axis(angle = 90)) +
scale_colour_manual(values = cbbPalette[c(3,4)]) +
theme_bw() +
ylab("Confidence intervak") +
xlab("Replicate number") +
theme(text = element_text(size = 14), legend.position = "bottom")
tips_data
ggplot(tips_data, aes(x = rep, y = omega)) +
geom_point(size = 1, position= position_dodge(0.8)) +
geom_errorbar(aes(ymax = omega_upper, ymin = omega_lower),
width = 1, position= position_dodge(0.8)) +
scale_x_discrete(guide = guide_axis(angle = 90)) +
facet_grid(~ param)
ggplot(tips_data, aes(x = rep, y = omega)) +
geom_point(size = 1, position= position_dodge(0.8)) +
geom_errorbar(aes(ymax = omega_upper, ymin = omega_lower),
width = 1, position= position_dodge(0.8)) +
scale_x_discrete(guide = guide_axis(angle = 90)) +
facet_grid(~ param) +
scale_colour_manual(values = cbbPalette[c(3,4)]) +
theme_bw() +
ylab("Confidence interval") +
xlab("Replicate number") +
theme(text = element_text(size = 14), legend.position = "bottom")
ggplot(tips_data, aes(x = rep, y = omega)) +
geom_point(size = 1, position= position_dodge(0.8)) +
geom_errorbar(aes(ymax = omega_upper, ymin = omega_lower),
width = 1, position= position_dodge(0.8)) +
scale_x_discrete(guide = guide_axis(angle = 90)) +
facet_grid(~ param, scales = "free") +
scale_colour_manual(values = cbbPalette[c(3,4)]) +
theme_bw() +
ylab("Confidence interval") +
xlab("Replicate number") +
theme(text = element_text(size = 14), legend.position = "bottom")
quartz()
ggplot(tips_data, aes(x = rep, y = omega)) +
geom_point(size = 1, position= position_dodge(0.8)) +
geom_errorbar(aes(ymax = omega_upper, ymin = omega_lower),
width = 1, position= position_dodge(0.8)) +
scale_x_discrete(guide = guide_axis(angle = 90)) +
facet_grid(~ param, scales = "free") +
scale_colour_manual(values = cbbPalette[c(3,4)]) +
theme_bw() +
ylab("Confidence interval") +
xlab("Replicate number") +
theme(text = element_text(size = 14), legend.position = "bottom")
ggplot(tips_data, aes(x = rep, y = omega, colour = param)) +
geom_point(size = 1, position= position_dodge(0.8)) +
geom_errorbar(aes(ymax = omega_upper, ymin = omega_lower),
width = 1, position= position_dodge(0.8)) +
scale_x_discrete(guide = guide_axis(angle = 90)) +
facet_grid(~ param, scales = "free") +
theme_bw() +
ylab("Confidence interval") +
xlab("Replicate number") +
theme(text = element_text(size = 14), legend.position = "bottom")
library(ggplot2)
#read data in which trees were simulated with CoalescentJl
julia_data <- readRDS("results/Julia_fit_results.rds")
julia_data["method"] <- "coalescentJl"
#read data in which trees were simulated with TiPS
tips_data <- readRDS("results/tips_fit_results.rds")
tips_data["method"] <- "TiPS"
#merge all data
all_data <- rbind(julia_data, tips_data)
#color blind save pallet (http://www.cookbook-r.com/Graphs/Colors_(ggplot2)/#a-colorblind-friendly-palette)
cbbPalette <- c("#000000", "#E69F00", "#56B4E9", "#009E73", "#F0E442", "#0072B2", "#D55E00", "#CC79A7")
quartz()
ggplot(tips_data, aes(x = rep, y = omega, colour = param)) +
geom_point(size = 1, position= position_dodge(0.8)) +
geom_errorbar(aes(ymax = omega_upper, ymin = omega_lower),
width = 1, position= position_dodge(0.8)) +
scale_x_discrete(guide = guide_axis(angle = 90)) +
facet_grid(~ param, scales = "free") +
theme_bw() +
ylab("Confidence interval") +
xlab("Replicate number") +
theme(text = element_text(size = 14), legend.position = "bottom")
ggplot(tips_data, aes(x = rep, y = omega, colour = param)) +
geom_point(size = 1, position= position_dodge(0.8)) +
geom_errorbar(aes(ymax = omega_upper, ymin = omega_lower),
width = 1, position= position_dodge(0.8)) +
scale_x_discrete(guide = guide_axis(angle = 90)) +
facet_grid(param, scales = "free") +
theme_bw() +
ylab("Confidence interval") +
xlab("Replicate number") +
theme(text = element_text(size = 14), legend.position = "bottom")
tips_data
ggplot(tips_data, aes(x = rep, y = omega, colour = param)) +
geom_point(size = 1, position= position_dodge(0.8)) +
geom_errorbar(aes(ymax = omega_upper, ymin = omega_lower),
width = 1, position= position_dodge(0.8)) +
scale_x_discrete(guide = guide_axis(angle = 90)) +
facet_grid(param ~, scales = "free") +
ggplot(tips_data, aes(x = rep, y = omega, colour = param)) +
geom_point(size = 1, position= position_dodge(0.8)) +
geom_errorbar(aes(ymax = omega_upper, ymin = omega_lower),
width = 1, position= position_dodge(0.8)) +
scale_x_discrete(guide = guide_axis(angle = 90)) +
facet_grid(~ param, scales = "free") +
theme_bw() +
ylab("Confidence interval") +
xlab("Replicate number") +
theme(text = element_text(size = 14), legend.position = "bottom")
ggplot(julia_data, aes(x = rep, y = omega, colour = param)) +
geom_point(size = 1, position= position_dodge(0.8)) +
geom_errorbar(aes(ymax = omega_upper, ymin = omega_lower),
width = 1, position= position_dodge(0.8)) +
scale_x_discrete(guide = guide_axis(angle = 90)) +
facet_grid(~ param, scales = "free") +
theme_bw() +
ylab("Confidence interval") +
xlab("Replicate number") +
theme(text = element_text(size = 14), legend.position = "bottom")
ggplot(julia_data, aes(x = rep, y = omega, colour = param)) +
geom_point(size = 1, position= position_dodge(0.8)) +
geom_errorbar(aes(ymax = omega_upper, ymin = omega_lower),
width = 1, position= position_dodge(0.8)) +
scale_x_discrete(guide = guide_axis(angle = 90)) +
facet_wrap(~ param, scales = "free") +
theme_bw() +
ylab("Confidence interval") +
xlab("Replicate number") +
theme(text = element_text(size = 14), legend.position = "bottom")
julia_data
ggplot(all_data, aes(x = rep, y = omega, colour = param)) +
geom_point(size = 1, position= position_dodge(0.8)) +
geom_errorbar(aes(ymax = omega_upper, ymin = omega_lower),
width = 1, position= position_dodge(0.8)) +
scale_x_discrete(guide = guide_axis(angle = 90)) +
facet_wrap( method ~ param, scales = "free") +
theme_bw() +
ylab("Confidence interval") +
xlab("Replicate number") +
theme(text = element_text(size = 14), legend.position = "bottom")
ggplot(all_data, aes(x = rep, y = omega_au, colour = param)) +
geom_point(size = 1, position= position_dodge(0.8)) +
geom_errorbar(aes(ymax = omega_au_upper, ymin = omega_au_lower),
width = 1, position= position_dodge(0.8)) +
scale_x_discrete(guide = guide_axis(angle = 90)) +
facet_wrap( method ~ param, scales = "free") +
theme_bw() +
ylab("Confidence interval") +
xlab("Replicate number") +
theme(text = element_text(size = 14), legend.position = "bottom")
ggplot(all_data, aes(x = rep, y = alpha_au, colour = param)) +
geom_point(size = 1, position= position_dodge(0.8)) +
geom_errorbar(aes(ymax = alpha_au_upper, ymin = alpha_au_lower),
width = 1, position= position_dodge(0.8)) +
scale_x_discrete(guide = guide_axis(angle = 90)) +
facet_wrap( method ~ param, scales = "free") +
theme_bw() +
ylab("Confidence interval") +
xlab("Replicate number") +
theme(text = element_text(size = 14), legend.position = "bottom")
all_data
ggplot(all_data, aes(x = rep, y = alpha, colour = param)) +
geom_point(size = 1, position= position_dodge(0.8)) +
geom_errorbar(aes(ymax = alpha_upper, ymin = alpha_lower),
width = 1, position= position_dodge(0.8)) +
scale_x_discrete(guide = guide_axis(angle = 90)) +
facet_wrap( method ~ param, scales = "free") +
theme_bw() +
ylab("Confidence interval") +
xlab("Replicate number") +
theme(text = element_text(size = 14), legend.position = "bottom")
